{"version":3,"sources":["logo.svg","Speech.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BrowserSpeechRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","continous","interimResults","lang","console","log","Speech","state","listening","toggleListen","bind","handleListen","this","setState","start","onend","end","finalTranscript","onresult","event","interimTranscript","i","resultIndex","results","length","transcript","isFinal","document","getElementById","innerHTML","style","container","id","button","onClick","interim","final","Component","display","flexDirection","alignItems","textAlign","width","height","background","borderRadius","margin","color","border","padding","App","className","href","axios","method","url","data","hello","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,0NCMrCC,EACkB,qBAAXC,SACNA,OAAOC,mBACND,OAAOE,yBACPF,OAAOG,sBACPH,OAAOI,qBACPJ,OAAOK,oBAETC,EAAcP,EAA2B,IAAIA,EAA6B,KAChFO,EAAYC,WAAY,EACxBD,EAAYE,gBAAiB,EAC7BF,EAAYG,KAAO,QACnBC,QAAQC,IAAI,mBAAoBL,G,IA0DjBM,E,kDArDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,WAAW,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANR,E,2DAUZN,QAAQC,IAAI,0BACZO,KAAKC,SAAS,CACZL,WAAYI,KAAKL,MAAMC,WACtBI,KAAKD,gB,qCAKRP,QAAQC,IAAI,uBAERO,KAAKL,MAAMC,WACbR,EAAYc,QACZd,EAAYe,MAAQ,kBAAMf,EAAYc,UAEtCd,EAAYgB,MAEd,IAAIC,EAAkB,GACtBjB,EAAYkB,SAAW,SAAAC,GAGrB,IAFA,IAAIC,EAAoB,GAEfC,EAAIF,EAAMG,YAAaD,EAAIF,EAAMI,QAAQC,OAAQH,IAAK,CAC7D,IAAMI,EAAaN,EAAMI,QAAQF,GAAG,GAAGI,WACnCN,EAAMI,QAAQF,GAAGK,QAAST,GAAmBQ,EAAa,IACzDL,GAAqBK,EAE5BE,SAASC,eAAe,WAAWC,UAAYT,EAC/CO,SAASC,eAAe,SAASC,UAAYZ,K,+BAK/C,OACE,yBAAKa,MAAOC,GACV,4BAAQC,GAAG,iBAAiBF,MAAOG,EAAQC,QAAStB,KAAKH,eACzD,yBAAKuB,GAAG,UAAUF,MAAOK,IACzB,yBAAKH,GAAG,QAEfF,MAAOM,S,GAjDaC,aA0FbN,EA7BK,CACTO,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,UAAW,UAyBIR,EAvBT,CACNS,MAAO,OACPC,OAAQ,OACRC,WAAY,YACZC,aAAc,MACdC,OAAQ,eAkBeX,EAhBhB,CACPY,MAAO,OACPC,OAAQ,iBACRC,QAAS,MACTH,OAAQ,MACRJ,MAAO,SAWyBN,EAT3B,CACLW,MAAO,QACPC,OAAQ,iBACRC,QAAS,MACTH,OAAQ,MACRJ,MAAO,S,wBClEIQ,MAnCf,WAmBE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,uBAAGC,KAAK,IAAIlB,QApBA,WACbmB,IAAM,CACJC,OAAO,OACPC,IAAM,eACNC,KAAO,CACVC,MAAO,aAeL,iBACA,uBAAGL,KAAK,IAAIlB,QAXD,WACZmB,IAAM,CACLC,OAAO,MACPC,IAAM,qBAQN,2BACA,4BAAQJ,UAAU,cAChB,yBAAKO,IAAKC,IAAMR,UAAU,WAAWS,IAAI,SACzC,yBAAKF,IAAI,gBACT,mCACO,4CADP,2BCrBYG,QACW,cAA7BnE,OAAOoE,SAASC,UAEe,UAA7BrE,OAAOoE,SAASC,UAEhBrE,OAAOoE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASC,eAAe,SDyHpB,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAMC,c","file":"static/js/main.77b35aef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\n'use strict'\nimport React, { Component } from 'react'\n\n//-----------------SPEECH RECOGNITION SETUP---------------------\n\nconst BrowserSpeechRecognition =\n      typeof window !== 'undefined' &&\n      (window.SpeechRecognition ||\n        window.webkitSpeechRecognition ||\n        window.mozSpeechRecognition ||\n        window.msSpeechRecognition ||\n        window.oSpeechRecognition)\n\nconst recognition = BrowserSpeechRecognition ? new BrowserSpeechRecognition() : null\nrecognition.continous = true\nrecognition.interimResults = true\nrecognition.lang = 'en-US'\nconsole.log(\"HAVE recognition\", recognition);\n//------------------------COMPONENT-----------------------------\n\nclass Speech extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      listening: false\n    }\n    this.toggleListen = this.toggleListen.bind(this)\n    this.handleListen = this.handleListen.bind(this)\n  }\n  \n  toggleListen() {\n    console.log(\"OK STARTING TO LISTEN!\");\n    this.setState({\n      listening: !this.state.listening\n    }, this.handleListen)\n  }\n  \n  handleListen(){\n    // handle speech recognition here\n    console.log(\"handlimg listening!\");\n   \n    if (this.state.listening) {\n      recognition.start()\n      recognition.onend = () => recognition.start()\n    } else {\n      recognition.end()\n    }\n    let finalTranscript = ''\n    recognition.onresult = event => {\n      let interimTranscript = ''\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) finalTranscript += transcript + ' ';\n        else interimTranscript += transcript;\n      }\n      document.getElementById('interim').innerHTML = interimTranscript\n      document.getElementById('final').innerHTML = finalTranscript  \n   }\n }\n\n  render() {\n    return (\n      <div style={container}>\n        <button id='microphone-btn' style={button} onClick={this.toggleListen} />\n        <div id='interim' style={interim}></div>\n        <div id='final'\n\n style={final}></div>\n      </div>\n    )\n  }\n}\n\nexport default Speech\n\n\n//-------------------------CSS------------------------------------\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  button: {\n    width: '60px',\n    height: '60px',\n    background: 'lightblue',\n    borderRadius: '50%',\n    margin: '6em 0 2em 0'\n  },\n  interim: {\n    color: 'gray',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  },\n  final: {\n    color: 'black',\n    border: '#ccc 1px solid',\n    padding: '1em',\n    margin: '1em',\n    width: '300px'\n  }\n}\n\nconst { container, button, interim, final } = styles\n","import React from 'react';\nimport logo from './logo.svg';\nimport Speech from './Speech';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App() {\n\n  const sendit =  ()=>{\n     axios({\n       method:\"post\",\n       url : '/set_gesture',\n       data : {\n\t   hello: \"world\"\n       }\n     });\t\n  }\n\n  const record = ()=>{\n     axios({\n      method:\"get\",\n      url : '/record/handup',\n     });\n  }\n\n  return (\n    <div className=\"App\">\n      <Speech/>\n      <a href=\"#\" onClick={sendit}>send category</a>\n      <a href=\"#\" onClick={record}>start recording gesture</a>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <img src=\"/video_feed\"/>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}